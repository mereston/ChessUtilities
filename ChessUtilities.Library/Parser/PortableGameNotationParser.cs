//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/willi/Development/PgnParser/PgnParser.Library/Parser/PortableGameNotation.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ChessUtilities.Library.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PortableGameNotationParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HALFMOVE=1, PAWNMOVESTUB=2, PIECEMOVE=3, PROMOTION=4, NONPAWNMOVESTUB=5, 
		KINGMOVESTUB=6, TEXT=7, WHITESPACE=8, NEWLINE=9, METATDATAATTR=10, MOVENUMBER=11, 
		CASTLE=12, SCORE=13;
	public const int
		RULE_pgnfile = 0, RULE_metadatasection = 1, RULE_movesection = 2, RULE_movelist = 3, 
		RULE_move = 4, RULE_halfmove = 5, RULE_movenumber = 6;
	public static readonly string[] ruleNames = {
		"pgnfile", "metadatasection", "movesection", "movelist", "move", "halfmove", 
		"movenumber"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "HALFMOVE", "PAWNMOVESTUB", "PIECEMOVE", "PROMOTION", "NONPAWNMOVESTUB", 
		"KINGMOVESTUB", "TEXT", "WHITESPACE", "NEWLINE", "METATDATAATTR", "MOVENUMBER", 
		"CASTLE", "SCORE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PortableGameNotation.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PortableGameNotationParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PortableGameNotationParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PortableGameNotationParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PgnfileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadatasectionContext metadatasection() {
			return GetRuleContext<MetadatasectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PortableGameNotationParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MovesectionContext movesection() {
			return GetRuleContext<MovesectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PortableGameNotationParser.Eof, 0); }
		public PgnfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pgnfile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPgnfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PgnfileContext pgnfile() {
		PgnfileContext _localctx = new PgnfileContext(Context, State);
		EnterRule(_localctx, 0, RULE_pgnfile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			metadatasection();
			State = 15;
			Match(NEWLINE);
			State = 16;
			movesection();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadatasectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] METATDATAATTR() { return GetTokens(PortableGameNotationParser.METATDATAATTR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METATDATAATTR(int i) {
			return GetToken(PortableGameNotationParser.METATDATAATTR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PortableGameNotationParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PortableGameNotationParser.NEWLINE, i);
		}
		public MetadatasectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadatasection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadatasection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadatasectionContext metadatasection() {
		MetadatasectionContext _localctx = new MetadatasectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_metadatasection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			Match(METATDATAATTR);
			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 20;
					Match(NEWLINE);
					State = 21;
					Match(METATDATAATTR);
					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovesectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MovelistContext movelist() {
			return GetRuleContext<MovelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(PortableGameNotationParser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCORE() { return GetToken(PortableGameNotationParser.SCORE, 0); }
		public MovesectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movesection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovesection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovesectionContext movesection() {
		MovesectionContext _localctx = new MovesectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_movesection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			movelist();
			State = 28;
			Match(WHITESPACE);
			State = 29;
			Match(SCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext[] move() {
			return GetRuleContexts<MoveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move(int i) {
			return GetRuleContext<MoveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(PortableGameNotationParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(PortableGameNotationParser.WHITESPACE, i);
		}
		public MovelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovelistContext movelist() {
		MovelistContext _localctx = new MovelistContext(Context, State);
		EnterRule(_localctx, 6, RULE_movelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			move();
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 32;
					Match(WHITESPACE);
					State = 33;
					move();
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MovenumberContext movenumber() {
			return GetRuleContext<MovenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HalfmoveContext[] halfmove() {
			return GetRuleContexts<HalfmoveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HalfmoveContext halfmove(int i) {
			return GetRuleContext<HalfmoveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(PortableGameNotationParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(PortableGameNotationParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PortableGameNotationParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PortableGameNotationParser.NEWLINE, i);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 8, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			movenumber();
			State = 40;
			_la = TokenStream.LA(1);
			if ( !(_la==WHITESPACE || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 41;
			halfmove();
			State = 42;
			_la = TokenStream.LA(1);
			if ( !(_la==WHITESPACE || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HALFMOVE) {
				{
				State = 43;
				halfmove();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HalfmoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HALFMOVE() { return GetToken(PortableGameNotationParser.HALFMOVE, 0); }
		public HalfmoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halfmove; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalfmove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HalfmoveContext halfmove() {
		HalfmoveContext _localctx = new HalfmoveContext(Context, State);
		EnterRule(_localctx, 10, RULE_halfmove);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(HALFMOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovenumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVENUMBER() { return GetToken(PortableGameNotationParser.MOVENUMBER, 0); }
		public MovenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movenumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortableGameNotationVisitor<TResult> typedVisitor = visitor as IPortableGameNotationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovenumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovenumberContext movenumber() {
		MovenumberContext _localctx = new MovenumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_movenumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(MOVENUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,51,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,2,1,2,1,2,1,
		2,1,3,1,3,1,3,5,3,35,8,3,10,3,12,3,38,9,3,1,4,1,4,1,4,1,4,1,4,3,4,45,8,
		4,1,5,1,5,1,6,1,6,1,6,0,0,7,0,2,4,6,8,10,12,0,1,1,0,8,9,46,0,14,1,0,0,
		0,2,19,1,0,0,0,4,27,1,0,0,0,6,31,1,0,0,0,8,39,1,0,0,0,10,46,1,0,0,0,12,
		48,1,0,0,0,14,15,3,2,1,0,15,16,5,9,0,0,16,17,3,4,2,0,17,18,5,0,0,1,18,
		1,1,0,0,0,19,24,5,10,0,0,20,21,5,9,0,0,21,23,5,10,0,0,22,20,1,0,0,0,23,
		26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,0,25,3,1,0,0,0,26,24,1,0,0,0,27,28,
		3,6,3,0,28,29,5,8,0,0,29,30,5,13,0,0,30,5,1,0,0,0,31,36,3,8,4,0,32,33,
		5,8,0,0,33,35,3,8,4,0,34,32,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,
		1,0,0,0,37,7,1,0,0,0,38,36,1,0,0,0,39,40,3,12,6,0,40,41,7,0,0,0,41,42,
		3,10,5,0,42,44,7,0,0,0,43,45,3,10,5,0,44,43,1,0,0,0,44,45,1,0,0,0,45,9,
		1,0,0,0,46,47,5,1,0,0,47,11,1,0,0,0,48,49,5,11,0,0,49,13,1,0,0,0,3,24,
		36,44
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace PgnParser.Library.Parser
